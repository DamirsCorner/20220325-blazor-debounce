@page "/search"

@using BlazorWebAsmDebounce.Services
@using System.Reactive.Subjects
@using System.Reactive.Linq

@inject SearchService SearchService
@implements IDisposable

<PageTitle>Search</PageTitle>

<h1>Search</h1>

<div class="mb-3">
    <label for="searchQuery" class="form-label">Search</label>
    <input type="text" class="form-control" id="searchQuery" @oninput="OnSearchQueryInput">
</div>

<ul class="list-group">
    @foreach (var result in SearchResults)
    {
        <li class="list-group-item">@result</li>
    }
</ul>

@code {
    private readonly Subject<string?> searchSubject = new();
    private IDisposable? searchSubscription;

    public IEnumerable<string> SearchResults { get; private set; } = Array.Empty<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        searchSubscription = searchSubject
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .SelectMany(async searchQuery => new
            {
                query = searchQuery,
                results = await SearchService.SearchAsync(searchQuery),
            })
            .Subscribe(search =>
            {
                Console.WriteLine($"{DateTime.Now.ToString("o")} Results: {search.query}");
                SearchResults = search.results;
                StateHasChanged();
            });
    }

    public void Dispose()
    {
        searchSubscription?.Dispose();
    }

    public void OnSearchQueryInput(ChangeEventArgs args)
    {
        var searchQuery = args.Value?.ToString();
        searchSubject.OnNext(searchQuery?.Trim());
    }
}
